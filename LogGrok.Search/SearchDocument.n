using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.WPF;

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Input;

using LogGrok.Core;
using LogGrok.FilterManager;
using LogGrok.LogView.DataVirtualization;
using LogGrok.LogView;
using LogGrok.Macros;

using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.PubSubEvents;

using Microsoft.Practices.Unity;
using System.Windows.Controls;

#pragma warning disable 10003

namespace LogGrok.Search
{
    [NotifyPropertyChanged]    
    internal class SearchDocument : ILineViewModelProviderAcceptor, IDisposable
    {
        public this([NotNull] navigationService : ILogNavigation, 
                    [NotNull] filterManager : FilterManager, 
                    [NotNull] searchFilter : SearchFilter, 
                    [NotNull] scratchPad : IScratchPad,
                     [NotNull] gridViewFactory : LogGridViewFactory,
                    [NotNull] lineViewModelProviderFactory : IItemProvider[int] -> IItemProvider[LineViewModel],
                    [NotNull] syncContext : SynchronizationContext)
        {
            _navigationService = navigationService;
            
            filterManager.RegisterClient(this);
            _searchFilter = searchFilter;
            _syncContext = syncContext;
            _gridViewFactory = gridViewFactory;
            _lineViewModelProviderFactory = lineViewModelProviderFactory;
            
            AddToScratchPad = DelegateCommand(o => (o : IEnumerable[object]).Cast.[VirtualLineViewModel]().Iter(x => scratchPad.AddText(x.RawLine)) );
            AddSingleLineToScratchPad = DelegateCommand(o => AddToScratchPad.Execute([o]));

            AddAndAnalyzeToScratchPad = DelegateCommand(o => (o : IEnumerable[object]).Cast.[VirtualLineViewModel]().Iter(x => scratchPad.AddAndAnalyzeText(x.RawLine)) );
            AddAndAnalyzeSingleLineToScratchPad = DelegateCommand(o => AddAndAnalyzeToScratchPad.Execute([o]));
            
            AnalyzeAllToScratchPad = DelegateCommand(_ => SearchResults.Iter(ln => scratchPad.AddAndAnalyzeText(ln.RawLine)));
            
            NavigateToIndex = DelegateCommand(
                i : object => match(i) { 
                    | i is int => 
                        def vm : VirtualLineViewModel = SearchResults[i];
                        _navigationService.NavigateTo(vm.GetProperty(v => v.Index));
                    | _ => ()}
                    );
        }
        
        public SetSearchPattern(pattern : SearchPattern) : void
        {
            SearchPattern = pattern;
            
            match(pattern.GetRegex())
            {
                | Some(r) => HighlightRegex = r
                | _ => ()
            }
            
            StartSearch();
        }

        public HighlightRegex : Regex
        {
            get; private set; 
        }

        public SearchPattern : SearchPattern
        {
            get; private set;
        }
        
        public CustomView : ViewBase 
        {
            get
            {
                _gridViewFactory.CreateView(false)
            }
        }

        public Dispose() : void
        { 
            _searchFilter.Reset(string.Empty, SearchOptions.None);
        }
                
        
        private StartSearch() : void
        {
            SearchProgress = 0;
            
            mutable options = SearchOptions.None;
            when (SearchPattern.CaseSensitive)
                options |= SearchOptions.CaseSensitive;
            
            when (SearchPattern.UseRegex) 
                options |= SearchOptions.UseRegex;
                
            _searchFilter.Reset(SearchPattern.Text, options);
        }
        
        public SearchResults : VirtualItemsList[LineViewModel, VirtualLineViewModel] { get; set; }

        [NotifyChangedOptions(Dependent = [IsIndeterninateProgress, IsSearching])]
        public SearchProgress : double { get; private set }
        
        public IsSearching : bool
        {
            get
            {
                SearchProgress < 100
            }
        }
        
        public IsIndeterninateProgress : bool
        {
            get
            {
                SearchProgress < 1
            }
        }
        
        public SelectedValue : VirtualLineViewModel 
        {
            get 
            { 
                _selectedValue; 
            }
            set 
            { 
                _selectedValue = value; 
                when (value != null)
                    _navigationService.NavigateTo(value.GetProperty(l => l.Index));
            }
        }

        ResetFilter() : void
            implements ILineViewModelProviderAcceptor.ResetFilter
        {
        }
        
        public SetItemProvider(itemProvider : DynamicFilteredLinesProvider) : void
        {
            _itemProvider = itemProvider;
            _itemProvider.ProgressChanged += _ => SearchProgress = _itemProvider.Progress;
            
            def lines = VirtualList(_lineViewModelProviderFactory(itemProvider), _syncContext);
            SearchResults  = VirtualItemsList(lines, lines, (l, i) => VirtualLineViewModel(l, i));
            SearchProgress = _itemProvider.Progress;
        }
        
        public AddToScratchPad : ICommand { get; private set; }
        public AddSingleLineToScratchPad : ICommand { get; private set; }
        public AddAndAnalyzeToScratchPad : ICommand { get; private set; }
        public AddAndAnalyzeSingleLineToScratchPad : ICommand { get; private set; }
        public AnalyzeAllToScratchPad : ICommand { get; private set; }
        public NavigateToIndex : ICommand { get; private set; }
        
        public IsAnalyzatorLoaded : bool
        {
            get 
            { 
                !AutoAnalyzer.SimpleLinesAnalyzer.Instance.IsEmpty()
            }
        }
        
        private _navigationService : ILogNavigation;
        private mutable _selectedValue : VirtualLineViewModel;    
        private mutable _itemProvider : DynamicFilteredLinesProvider;
        private _lineViewModelProviderFactory : IItemProvider[int] -> IItemProvider[LineViewModel];
        private _searchFilter  : SearchFilter;
        private _syncContext   : SynchronizationContext;
        private _gridViewFactory : LogGridViewFactory;
        
        private mutable _searchText    : string;
        private mutable _isCaseSensitive : bool;
        private mutable _useRegex : bool;
    }
}
